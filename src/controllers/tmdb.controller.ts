import admin, { db } from "../config/firebase.config.js";
import Scraper from "../data/scrape.js";
import { ApiError } from "../utils/ApiError.utils.js";
import { asyncHandler } from "../utils/asyncHandler.js";
import type { Request, Response } from "express";

interface IMDBTrendingResponse {
  title: string;
  movieUrl: string;
  watchlistId: string;
  year: string;
  posterUrl: string;
  posterAlt: string;
  metascore: string;
  imdbVotes: string;
  imdbRating: string;
  rating: string;
  runtime: string;
  ranking: string;
  plot: string;
  director: string;
  stars: string[];
}

interface CachedTrendingMovies {
  data: IMDBTrendingResponse[];
  cached_at: admin.firestore.Timestamp;
  auto_generated: boolean;
}

const fetchTrendingMoviesFromAPI = async (): Promise<
  IMDBTrendingResponse[]
> => {
  try {
    const scraper = new Scraper();
    const movieList = await scraper.scrapeTrending(
      "https://www.imdb.com/list/ls082250769/"
    );

    const data = movieList as IMDBTrendingResponse[];

    if (!Array.isArray(data) || data.length === 0) {
      throw new ApiError(500, "No trending movies data received");
    }

    return data;
  } catch (error) {
    console.error("Error fetching trending movies:", error);
    throw new ApiError(500, "Failed to fetch trending movies");
  }
};

const storeTrendingMoviesInCache = async (
  data: IMDBTrendingResponse[],
  autoGenerated = false
): Promise<void> => {
  try {
    const now = admin.firestore.Timestamp.now();

    const cacheData: CachedTrendingMovies = {
      data,
      cached_at: now,
      auto_generated: autoGenerated,
    };

    await db
      .collection("trending_movies_cache")
      .doc("daily_trending")
      .set(cacheData);

    console.log(
      `Stored trending movies in cache (${
        autoGenerated ? "auto-generated" : "manual"
      }):`,
      new Date().toISOString(),
      `- Total movies: ${data.length}`
    );
  } catch (error) {
    console.error("Error storing cache:", error);
    throw new ApiError(500, "Failed to store cache");
  }
};

const GetTrendingMovies = asyncHandler(async (req: Request, res: Response) => {
  try {
    const cacheDoc = await db
      .collection("trending_movies_cache")
      .doc("daily_trending")
      .get();

    if (cacheDoc.exists) {
      const cachedData = cacheDoc.data() as CachedTrendingMovies;
      return res.status(200).json({
        success: true,
        data: cachedData.data,
        source: "cache",
        cached_at: cachedData.cached_at.toDate(),

        total_movies: cachedData.data.length,
      });
    }

    console.log("Fetching trending movies from IMDb");
    const trendingData = await fetchTrendingMoviesFromAPI();
    await storeTrendingMoviesInCache(trendingData, false);

    res.status(200).json({
      success: true,
      data: trendingData,
      source: "api",
      cached_at: new Date(),
      total_movies: trendingData.length,
    });
  } catch (error: any) {
    console.error(" Error getting trending movies:", error);

    if (error instanceof ApiError) {
      res.status(error.statusCode).json({
        success: false,
        status: error.statusCode,
        message: error.message,
        type: error.type,
      });
    } else {
      res.status(500).json({
        success: false,
        status: 500,
        message: "Failed to get trending movies",
        type: "INTERNAL_ERROR",
      });
    }
  }
});

const fetchMovieFromIMDb = async (imdbId: string): Promise<any> => {
  try {
    const scraper = new Scraper();
    const movieData = await scraper.scrapeCompleteMovieData(
      `https://www.imdb.com/title/${imdbId}`
    );

    if (!movieData) {
      throw new ApiError(404, "Movie not found or failed to scrape");
    }

    return movieData;
  } catch (error) {
    console.error("Error scraping movie data:", error);
    if (error instanceof ApiError) {
      throw error;
    }
    throw new ApiError(500, "Failed to scrape movie data from IMDb");
  }
};

const storeMovieDataInFirebase = async (
  imdbId: string,
  movieData: any
): Promise<void> => {
  try {
    const movieDoc = {
      imdb_id: imdbId,
      data: movieData,
      created_at: admin.firestore.Timestamp.now(),
      updated_at: admin.firestore.Timestamp.now(),
    };

    await db.collection("movies").doc(imdbId).set(movieDoc);

    console.log(`stored movie data for ${imdbId} in Firebase`);
  } catch (error) {
    console.error("Error storing movie data in Firebase:", error);
    throw new ApiError(500, "Failed to store movie data in Firebase");
  }
};

const GetMovieData = asyncHandler(async (req: Request, res: Response) => {
  try {
    const imdbIdParam = req.params.imdbId;
    if (!imdbIdParam) {
      throw new ApiError(400, "IMDb ID parameter is required");
    }

    const movieDoc = await db.collection("movies").doc(imdbIdParam).get();

    if (movieDoc.exists) {
      const movieData = movieDoc.data();
      console.log(`ðŸ“‹ Retrieved movie data for ${imdbIdParam} from Firebase`);

      return res.status(200).json({
        success: true,
        imdb_id: imdbIdParam,
        data: movieData?.data,
        source: "firebase",
      });
    }

    console.log(`Scraping movie data for ${imdbIdParam} from IMDb...`);
    const movieData = await fetchMovieFromIMDb(imdbIdParam);

    await storeMovieDataInFirebase(imdbIdParam, movieData);

    res.status(200).json({
      success: true,
      imdb_id: imdbIdParam,
      data: movieData,
      source: "scraper",
    });
  } catch (error: any) {
    console.error(` Error getting movie data for :`, error);

    if (error instanceof ApiError) {
      res.status(error.statusCode).json({
        success: false,
        status: error.statusCode,
        message: error.message,
      });
    } else {
      res.status(500).json({
        success: false,
        status: 500,
        message: "Failed to get movie data",
      });
    }
  }
});
const TMDB_API_KEY = process.env.Tm_read; // store in .env

// Step 1: Get TMDB ID from IMDb ID
const getTMDBIdFromIMDb = async (imdbId: string) => {
  const url = `https://api.themoviedb.org/3/find/${imdbId}?api_key=${TMDB_API_KEY}&external_source=imdb_id`;
  const res = await fetch(url);
  if (!res.ok) throw new ApiError(res.status, "Failed to fetch TMDB ID");

  const data = await res.json();
  if (!data.movie_results?.length) {
    throw new ApiError(404, `Movie not found on TMDB for IMDb ID: ${imdbId}`);
  }

  return data.movie_results[0].id;
};

// Step 2: Get YouTube trailer from TMDB ID
const getTrailerFromTMDB = async (tmdbId: number) => {
  const url = `https://api.themoviedb.org/3/movie/${tmdbId}/videos?api_key=${TMDB_API_KEY}`;
  const res = await fetch(url);
  if (!res.ok) throw new ApiError(res.status, "Failed to fetch trailers");

  const data = await res.json();
  const trailer = data.results?.find(
    (v: any) => v.type === "Trailer" && v.site === "YouTube"
  );

  if (!trailer) throw new ApiError(404, "No YouTube trailer found");

  return `https://www.youtube.com/watch?v=${trailer.key}`;
};

// Controller
const GetMovieTrailer = asyncHandler(async (req: Request, res: Response) => {
  const { imdbId } = req.body;

  if (!imdbId) {
    throw new ApiError(400, "IMDb ID is required in body");
  }

  try {
    const tmdbId = await getTMDBIdFromIMDb(imdbId);
    const youtubeUrl = await getTrailerFromTMDB(tmdbId);

    res.status(200).json({
      success: true,
      imdb_id: imdbId,
      tmdb_id: tmdbId,
      trailer_url: youtubeUrl,
    });
  } catch (err) {
    console.error("Error fetching trailer:", err);
    if (err instanceof ApiError) {
      res.status(err.statusCode).json({
        success: false,
        status: err.statusCode,
        message: err.message,
      });
    } else {
      res.status(500).json({
        success: false,
        status: 500,
        message: "Failed to fetch movie trailer",
      });
    }
  }
});

export { GetMovieTrailer, GetTrendingMovies, GetMovieData };
