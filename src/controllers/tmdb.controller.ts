// controllers/tmdb.controller.ts
import admin, { db } from "../config/firebase.config.js";
import { ApiError } from "../utils/ApiError.utils.js";
import { asyncHandler } from "../utils/asyncHandler.js";
import type { Request, Response } from "express";
import cron from "node-cron";

// Define interfaces for TMDB trending movies response
interface TMDBMovie {
  adult: boolean;
  backdrop_path: string | null;
  id: number;
  title: string;
  original_language: string;
  original_title: string;
  overview: string;
  poster_path: string | null;
  media_type: string;
  genre_ids: number[];
  popularity: number;
  release_date: string;
  video: boolean;
  vote_average: number;
  vote_count: number;
}

interface TMDBTrendingResponse {
  page: number;
  results: TMDBMovie[];
  total_pages: number;
  total_results: number;
}

interface CachedTrendingMovies {
  data: TMDBTrendingResponse;
  cached_at: admin.firestore.Timestamp;
  expires_at: admin.firestore.Timestamp;
  auto_generated: boolean;
}

const isCacheExpired = (cachedAt: admin.firestore.Timestamp): boolean => {
  const now = new Date();
  const cacheTime = cachedAt.toDate();
  const twentyFourHoursAgo = new Date(now.getTime() - 24 * 60 * 60 * 1000);

  return cacheTime < twentyFourHoursAgo;
};

const fetchTrendingMoviesFromAPI = async (): Promise<TMDBTrendingResponse> => {
  const accessToken = process.env.TMDB_ACCESS_TOKEN;

  if (!accessToken) {
    throw new ApiError(500, "Missing TMDB access token", "INTERNAL_ERROR");
  }

  const url = "https://api.themoviedb.org/3/trending/movie/day";

  const response = await fetch(url, {
    method: "GET",
    headers: {
      Authorization: `Bearer ${accessToken}`,
      "Content-Type": "application/json",
    },
  });

  if (!response.ok) {
    throw new ApiError(
      response.status,
      `TMDB API error: ${response.statusText}`
    );
  }

  const data = (await response.json()) as TMDBTrendingResponse;
  return data;
};

const storeTrendingMoviesInCache = async (
  data: TMDBTrendingResponse,
  autoGenerated = false
): Promise<void> => {
  const now = admin.firestore.Timestamp.now();
  const expiresAt = admin.firestore.Timestamp.fromDate(
    new Date(Date.now() + 24 * 60 * 60 * 1000)
  );

  const cacheData: CachedTrendingMovies = {
    data,
    cached_at: now,
    expires_at: expiresAt,
    auto_generated: autoGenerated,
  };

  await db
    .collection("trending_movies_cache")
    .doc("daily_trending")
    .set(cacheData);

  console.log(
    `Stored trending movies in cache (${
      autoGenerated ? "auto-generated" : "manual"
    }):`,
    new Date().toISOString()
  );
};

const GetTrendingMovies = asyncHandler(async (req: Request, res: Response) => {
  try {
    const cacheDoc = await db
      .collection("trending_movies_cache")
      .doc("daily_trending")
      .get();

    if (cacheDoc.exists) {
      const cachedData = cacheDoc.data() as CachedTrendingMovies;

      if (!isCacheExpired(cachedData.cached_at)) {
        console.log("Retrieved trending movies from cache");

        return res.status(200).json({
          success: true,
          data: cachedData.data,
          source: "cache",
          cached_at: cachedData.cached_at.toDate(),
          expires_at: cachedData.expires_at.toDate(),
        });
      } else {
        console.log("⏰ Cache expired, fetching fresh data...");
      }
    }

    console.log("🌐 Fetching trending movies from TMDB API...");
    const trendingData = await fetchTrendingMoviesFromAPI();

    await storeTrendingMoviesInCache(trendingData, false);

    res.status(200).json({
      success: true,
      data: trendingData,
      source: "api",
      cached_at: new Date(),
      expires_at: new Date(Date.now() + 24 * 60 * 60 * 1000),
    });
  } catch (error: any) {
    console.error("Error getting trending movies:", error);

    if (error instanceof ApiError) {
      res.status(error.statusCode).send({
        status: error.statusCode,
        message: error.message,
        type: error.type,
      });
    } else {
      res.status(500).send({
        status: 500,
        message: "Failed to get trending movies",
        type: "INTERNAL_ERROR",
      });
    }
  }
});

const RefreshTrendingMovies = asyncHandler(
  async (req: Request, res: Response) => {
    try {
      console.log("🔄 Manually refreshing trending movies...");

      const trendingData = await fetchTrendingMoviesFromAPI();
      await storeTrendingMoviesInCache(trendingData, false);

      res.status(200).json({
        success: true,
        message: "Trending movies refreshed successfully",
        data: trendingData,
        refreshed_at: new Date(),
      });
    } catch (error: any) {
      console.error("Error refreshing trending movies:", error);

      if (error instanceof ApiError) {
        res.status(error.statusCode).send({
          status: error.statusCode,
          message: error.message,
          type: error.type,
        });
      } else {
        res.status(500).send({
          status: 500,
          message: "Failed to refresh trending movies",
          type: "INTERNAL_ERROR",
        });
      }
    }
  }
);

const cleanupExpiredCache = async (): Promise<void> => {
  try {
    console.log(" Running cleanup for expired trending movies cache...");

    const cacheDoc = await db
      .collection("trending_movies_cache")
      .doc("daily_trending")
      .get();

    if (cacheDoc.exists) {
      const cachedData = cacheDoc.data() as CachedTrendingMovies;

      if (isCacheExpired(cachedData.cached_at)) {
        await cacheDoc.ref.delete();
        console.log(" Deleted expired trending movies cache");
      } else {
        console.log(" Trending movies cache is still valid");
      }
    } else {
      console.log(" No trending movies cache found");
    }
  } catch (error) {
    console.error(" Error cleaning up expired cache:", error);
  }
};

const autoRefreshTrendingMovies = async (): Promise<void> => {
  try {
    console.log("Auto-refreshing trending movies...");

    const cacheDoc = await db
      .collection("trending_movies_cache")
      .doc("daily_trending")
      .get();

    let shouldRefresh = true;

    if (cacheDoc.exists) {
      const cachedData = cacheDoc.data() as CachedTrendingMovies;
      shouldRefresh = isCacheExpired(cachedData.cached_at);
    }

    if (shouldRefresh) {
      const trendingData = await fetchTrendingMoviesFromAPI();
      await storeTrendingMoviesInCache(trendingData, true);
      console.log(" Auto-refresh completed successfully");
    } else {
      console.log("⏭Skip auto-refresh: cache is still valid");
    }
  } catch (error) {
    console.error(" Error in auto-refresh:", error);
  }
};

const GetCacheStatus = asyncHandler(async (req: Request, res: Response) => {
  try {
    const cacheDoc = await db
      .collection("trending_movies_cache")
      .doc("daily_trending")
      .get();

    if (!cacheDoc.exists) {
      return res.status(200).json({
        success: true,
        cache_exists: false,
        message: "No cache found",
      });
    }

    const cachedData = cacheDoc.data() as CachedTrendingMovies;
    const isExpired = isCacheExpired(cachedData.cached_at);
    const timeLeft = cachedData.expires_at.toDate().getTime() - Date.now();

    res.status(200).json({
      success: true,
      cache_exists: true,
      is_expired: isExpired,
      cached_at: cachedData.cached_at.toDate(),
      expires_at: cachedData.expires_at.toDate(),
      time_left_ms: Math.max(0, timeLeft),
      time_left_hours: Math.max(0, Math.round(timeLeft / (1000 * 60 * 60))),
      auto_generated: cachedData.auto_generated,
      total_movies: cachedData.data.results.length,
    });
  } catch (error: any) {
    console.error("Error getting cache status:", error);

    res.status(500).send({
      status: 500,
      message: "Failed to get cache status",
      type: "INTERNAL_ERROR",
    });
  }
});

const initializeCronJobs = (): void => {
  cron.schedule("0 */6 * * *", autoRefreshTrendingMovies, {
    timezone: "Asia/Kolkata",
  });

  cron.schedule("0 * * * *", cleanupExpiredCache, {
    timezone: "Asia/Kolkata",
  });

  cron.schedule("1 0 * * *", autoRefreshTrendingMovies, {
    timezone: "Asia/Kolkata",
  });

  console.log(" Cron jobs initialized:");
  console.log("- Auto-refresh: Every 6 hours");
  console.log("- Cleanup: Every hour");
  console.log("- Daily refresh: 12:01 AM");
};

initializeCronJobs();

export {
  GetTrendingMovies,
  RefreshTrendingMovies,
  GetCacheStatus,
  initializeCronJobs,
  cleanupExpiredCache,
  autoRefreshTrendingMovies,
};
